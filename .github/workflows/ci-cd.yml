name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  REGISTRY_URL: 'https://npm.pkg.github.com'

jobs:
  test:
    name: Test Components
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies for postmessage-helper
        run: |
          echo "Repository root: $(pwd)"
          echo "Files in repository root:"
          ls -la
          echo "Changing to postmessage-helper directory..."
          cd src/oslc-postmessage-helper
          echo "Current working directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          npm ci

      - name: Run tests for postmessage-helper
        working-directory: ./src/oslc-postmessage-helper
        run: npm run test || echo "No tests configured"

      - name: Build postmessage-helper
        working-directory: ./src/oslc-postmessage-helper
        run: npm run build

      - name: Pack postmessage-helper
        working-directory: ./src/oslc-postmessage-helper
        run: npm pack

      - name: Install dependencies for selection-webcomponent
        working-directory: ./src/oslc-selection-webcomponent
        run: |
          # Install local dependency
          npm install ../oslc-postmessage-helper/oslc-postmessage-helper-*.tgz
          # Use npm install instead of npm ci since we just modified package-lock.json
          npm install

      - name: Run tests for selection-webcomponent
        working-directory: ./src/oslc-selection-webcomponent
        run: npm run test || echo "No tests configured"

      - name: Build selection-webcomponent
        working-directory: ./src/oslc-selection-webcomponent
        run: npm run build

  build-and-publish:
    name: Build and Publish to GitHub Registry
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}
          cache: 'npm'
          cache-dependency-path: |
            src/oslc-postmessage-helper/package-lock.json
            src/oslc-selection-webcomponent/package-lock.json

      - name: Configure npm for GitHub Registry
        run: |
          echo "@oslc:registry=${{ env.REGISTRY_URL }}" >> ~/.npmrc
          echo "${{ env.REGISTRY_URL }}/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> ~/.npmrc

      - name: Update package.json repository URLs
        run: |
          # Update postmessage-helper package.json
          cd src/oslc-postmessage-helper
          npm pkg set repository.url="git+https://github.com/${{ github.repository }}.git"
          npm pkg set repository.directory="src/oslc-postmessage-helper"
          npm pkg set publishConfig.registry="${{ env.REGISTRY_URL }}"
          
          # Update selection-webcomponent package.json
          cd ../oslc-selection-webcomponent
          npm pkg set repository.url="git+https://github.com/${{ github.repository }}.git"
          npm pkg set repository.directory="src/oslc-selection-webcomponent"
          npm pkg set publishConfig.registry="${{ env.REGISTRY_URL }}"

      - name: Build and publish postmessage-helper
        working-directory: ./src/oslc-postmessage-helper
        run: |
          npm ci
          npm run build
          npm pack
          
          # Check if version exists before publishing
          VERSION=$(npm pkg get version | tr -d '"')
          if npm view @oslc/postmessage-helper@$VERSION --registry=${{ env.REGISTRY_URL }} 2>/dev/null; then
            echo "Version $VERSION already exists, skipping publish"
          else
            npm publish
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and publish selection-webcomponent
        working-directory: ./src/oslc-selection-webcomponent
        run: |
          # Install local dependency
          npm install ../oslc-postmessage-helper/oslc-postmessage-helper-*.tgz
          # Use npm install instead of npm ci since we just modified package-lock.json
          npm install
          npm run build
          npm pack
          
          # Check if version exists before publishing
          VERSION=$(npm pkg get version | tr -d '"')
          if npm view @oslc/selection-webcomponent@$VERSION --registry=${{ env.REGISTRY_URL }} 2>/dev/null; then
            echo "Version $VERSION already exists, skipping publish"
          else
            npm publish
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: built-packages
          path: |
            src/oslc-postmessage-helper/dist/
            src/oslc-selection-webcomponent/dist/
            src/oslc-postmessage-helper/*.tgz
            src/oslc-selection-webcomponent/*.tgz

  deploy-demo:
    name: Deploy Demo to GitHub Pages
    needs: [test, build-and-publish]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            src/oslc-postmessage-helper/package-lock.json
            src/oslc-selection-webcomponent/package-lock.json

      - name: Build components for demo
        run: |
          # Build postmessage-helper
          cd src/oslc-postmessage-helper
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
          npm run build
          npm pack
          
          # Build selection-webcomponent with local dependency
          cd ../oslc-selection-webcomponent
          npm install ../oslc-postmessage-helper/oslc-postmessage-helper-*.tgz
          # Use npm install instead of npm ci since we just modified package-lock.json
          npm install
          npm run build
          
          # Copy built components to demo vendor folder
          mkdir -p ../oslc-selection-demo/vendor/@oslc/oslc-postmessage-helper
          mkdir -p ../oslc-selection-demo/vendor/@oslc/oslc-selection-webcomponent
          
          cp -r ../oslc-postmessage-helper/dist/* ../oslc-selection-demo/vendor/@oslc/oslc-postmessage-helper/
          cp -r dist/* ../oslc-selection-demo/vendor/@oslc/oslc-selection-webcomponent/

      - name: Create deployment version info
        run: |
          cd src/oslc-selection-demo
          cat > version.json << EOF
          {
            "version": "$(date -u +%Y%m%d-%H%M%S)",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "buildTime": "$(date -u --iso-8601=seconds)",
            "components": {
              "postmessage-helper": "$(cd ../oslc-postmessage-helper && npm pkg get version | tr -d '\"')",
              "selection-webcomponent": "$(cd ../oslc-selection-webcomponent && npm pkg get version | tr -d '\"')"
            }
          }
          EOF

      - name: Create index page with build info
        run: |
          cd src/oslc-selection-demo
          # Add build info to the HTML
          sed -i 's|<div class="alert alert-info mt-4" role="alert">.*</div>|<div class="alert alert-success mt-4" role="alert"><strong>Build Status:</strong> <span class="text-success">âœ… GitHub Pages deployment - Built from commit ${{ github.sha }}</span><br><small>Build time: $(date -u --iso-8601=seconds)</small></div>|' index.html

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./src/oslc-selection-demo

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  publish-release:
    name: Publish Release Packages
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}
          cache: 'npm'
          cache-dependency-path: |
            src/oslc-postmessage-helper/package-lock.json
            src/oslc-selection-webcomponent/package-lock.json

      - name: Configure npm for GitHub Registry
        run: |
          echo "@oslc:registry=${{ env.REGISTRY_URL }}" >> ~/.npmrc
          echo "${{ env.REGISTRY_URL }}/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> ~/.npmrc

      - name: Update package versions to release tag
        run: |
          RELEASE_VERSION=${GITHUB_REF#refs/tags/v}
          echo "Release version: $RELEASE_VERSION"
          
          # Update postmessage-helper version
          cd src/oslc-postmessage-helper
          npm version $RELEASE_VERSION --no-git-tag-version
          npm pkg set repository.url="git+https://github.com/${{ github.repository }}.git"
          npm pkg set repository.directory="src/oslc-postmessage-helper"
          npm pkg set publishConfig.registry="${{ env.REGISTRY_URL }}"
          
          # Update selection-webcomponent version
          cd ../oslc-selection-webcomponent
          npm version $RELEASE_VERSION --no-git-tag-version
          npm pkg set repository.url="git+https://github.com/${{ github.repository }}.git"
          npm pkg set repository.directory="src/oslc-selection-webcomponent"
          npm pkg set publishConfig.registry="${{ env.REGISTRY_URL }}"
          
          # Update dependency reference
          npm pkg set dependencies.@oslc/postmessage-helper="^$RELEASE_VERSION"

      - name: Build and publish release packages
        run: |
          # Build and publish postmessage-helper
          cd src/oslc-postmessage-helper
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
          npm run build
          npm publish --tag latest
          
          # Build and publish selection-webcomponent
          cd ../oslc-selection-webcomponent
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
          npm run build
          npm publish --tag latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release artifacts
        run: |
          mkdir -p release-artifacts
          
          # Copy built distributions
          cp -r src/oslc-postmessage-helper/dist release-artifacts/postmessage-helper-dist
          cp -r src/oslc-selection-webcomponent/dist release-artifacts/selection-webcomponent-dist
          
          # Copy demo
          cp -r src/oslc-selection-demo release-artifacts/demo
          
          # Create archive
          tar -czf release-artifacts/oslc-selection-utils-${{ github.ref_name }}.tar.gz \
            -C release-artifacts \
            postmessage-helper-dist \
            selection-webcomponent-dist \
            demo

      - name: Upload release artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release-artifacts/oslc-selection-utils-${{ github.ref_name }}.tar.gz
          asset_name: oslc-selection-utils-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip
